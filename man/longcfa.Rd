% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/longcfa.R
\name{longcfa}
\alias{longcfa}
\title{Wrapper function for longitudinal CFA (Experimental)}
\usage{
longcfa(
  ind_matrix,
  lv_names,
  model = NULL,
  lag_cov = FALSE,
  long_equal = NULL,
  long_partial = NULL,
  ...
)
}
\arguments{
\item{ind_matrix}{A $p \times T$ character matrix specifying the
names of the indicator variables across time points. Each column
corresponds to a time point.}

\item{lv_names}{A vector of names of $T$ latent variables.}

\item{model}{A character string showing additional syntax to be
added to the model. Defaults to \code{NULL}.}

\item{lag_cov}{Logical; whether the same indicator is allowed to
correlate over time.}

\item{long_equal}{A character vector indicating types of parameters
to be constrained equal across time points. This is similar to
the \code{group.equal} argument in \code{lavaan::cfa()}. Currently, only
\code{"loadings"}, \code{"intercepts"}, and \code{"residuals"} are supported.}

\item{long_partial}{A named list of matrices specifying specific
indicators to have different parameter values for a specific time
point. The list should have names "loadings", "intercepts", and
"residuals", and each element is a 2-column matrix where each row
specifies the indicator (column 1) and the time point (column 2)
for the parameter to be free. See example below.}

\item{...}{Other arguments passed to \code{lavaan::cfa()}, such as \code{data}.}
}
\value{
A fit object as returned by \code{lavaan::cfa()}.
}
\description{
This function estimates a longitudinal measurement model by first
generating model syntax (using the \code{\link[=longcfa_syntax]{longcfa_syntax()}} function), and
then fit the model using \code{\link[lavaan:cfa]{lavaan::cfa()}}. An input matrix is needed
where the rows are the indicators and the columns are the time points.
}
\details{
Currently only supports model with one latent variable at each time
point.
}
\examples{
library(lavaan)
# Indicator matrix
spec <- matrix(c(
    "y1", "y2", "y3", "y4",
    "y5", "y6", "y7", "y8"
), ncol = 2)
# Scalar invariance
fit <- longcfa(spec,
               lv_names = c("dem60", "dem65"),
               data = PoliticalDemocracy,
               long_equal = c("loadings", "intercepts"))
summary(fit)
# Partial invariance
fit2 <- longcfa(spec,
                lv_names = c("dem60", "dem65"),
                data = PoliticalDemocracy,
                long_equal = c("loadings", "intercepts"),
                long_partial = list(
                    loadings = matrix(c(1, 2), ncol = 2),
                    intercepts = matrix(c(1, 3, 2, 2), ncol = 2)
                ))
summary(fit2)
}
